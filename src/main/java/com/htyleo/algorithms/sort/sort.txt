Insertion Sort
    worst-case running time = O(N^2)
    space = O(1)



Merge Sort
    worst-case running time = O(N*logN)
    space = O(N), needs extra memory space (unless implemented in linked list).



Heap Sort
    worst-case running time = O(N*logN)
    space = O(1)



Quick Sort
    worst-case running time = O(N^2)
    expected running time = O(N*logN)
    space = O(1)



Counting Sort
    N input with K possible values: O(N + K).



Radix Sort
    Use stable sort to sort w.r.t. each digit;
    N input each with D digits where each digit takes up to K values: O(D(K + N)) if the stable sort takes O(K + N).



External Sort: sort files with limited RAM
    RAM: M pages
    File size: B pages (B > M)

    Simple sort + merge:
    1. Sort the file in chunks of M, with C = ceil(B / M) chunks.
        # of page access = 2B (read & write)

    2. Read the first M/(C+1) of each sorted chunk into input buffers in main memory and allocate the remaining M/(C+1) for an output buffer.
        RAM: input buffer = C * M/(C+1), output buffer = M/(C+1)

    3. Perform a C-way merge and store the result in the output buffer. Whenever the output buffer fills, write it to the final sorted file and empty it. Whenever any of the C input buffers empties, fill it with the next M/(C+1) of its associated sorted chunk until no more data is available.
        # of page access = 2B


    Additional passes: if C >= M, several merge passes are required.
    In each pass, contiguous M-1 chunks are merged. A pass reduces the number of chunks by a factor of M-1, and creates chunks longer by the same factor. Repeated passes are performed till all chunks have been merged into one.
        # of page access = 2B for each pass.
        total # of page access = 2B * (log_{M-1}(B / M) + 1)



Lower bound of comparison-based sorting algorithms: Big-Omega(N*logN)
    worst-case
        Decision Tree
            One tree for each input size N
            Worst-case running time = height of tree: h
            A decision tree to sort N elements must have at least N! leaves, (N! orderings).
            The minimum height of a tree with N leaves = ceiling(logN). (A tree of height h has at most 2^h leaves)
            => h >= ceiling(log(N!)) = Big-Omega(N*logN) (Stirlingâ€™s approximation)
    average
        The External Path Length (EPL) of a tree is the sum over all leaves of the tree, of the length of the paths from the root to the leaves.
        Average number of comparisons used by a sorting algorithm is EPL of its associated comparison tree divided by n!.
        The EPL of a binary tree with m leaves is at least mlogm + O(m).
        The comparison tree has m = N! leaves => EPL = (N!)log(N!) + O(N!) => avg = log(N!) + O(1) = Big-Omega(N*logN)



Stable sort: preserves the input order among equal elements.
    Counting Sort
    Radix Sort